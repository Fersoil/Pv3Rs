% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enumerate_RGs.R
\name{enumerate_RGs}
\alias{enumerate_RGs}
\title{A function to enumerate all transitive relationship graphs (RG)}
\usage{
enumerate_RGs(MOIs)
}
\arguments{
\item{MOIs}{A numeric vector specifying, for each infection, the number of
distinct parasite genotypes, a.k.a the multiplicity of infection (MOI).}
}
\value{
Returns a list of transitive relationship graphs (RGs).

Each RG is an igraph graph, see \code{\link[igraph]{igraph}}. The seven
character code after IGRAPH, is the first seven characters of the graph ID;
see \code{\link[igraph]{graph_id}}.

RGs are undirected. They are weighted, except when they contain only stranger genotypes.

Vertices represent parasite genotypes. Vertices are named consecutively
from one to the total genotype count, \code{sum(MOIs)}. Vertex
names are used to index genotypes and inter-genotype relationships. Vertex
IDs are not used to index genotypes and their relationships because vertex
IDs are renumbered upon application of some igraph operations, e.g.
\code{\link[igraph]{induced_subgraph}}. Genotypes are grouped into
infections using a vertex attribute called group. The group attribute is used by XXX to
group genotypes by infection.

Edges represent sibling or clonal relationships that are differentiated by
weight: 0.5 encodes a sibling relationship, 1 encodes a clonal
relationship. Strangers have zero weight and thus there are no edges
between them.
}
\description{
Enumerates all transitive graphs of stranger, sibling and clonal
relationships between distinct parasite genotypes within and across
infections. \code{enumerate_RGs} is limited to six or fewer genotypes among
three or fewer infections because the number of graphs grows exponentially
with the number of genotypes and the number of infections; see examples.
}
\section{Provenance}{
 This function was adapted from
\code{generate_all_models_3Ts} and \code{generate_all_models_2Ts} at
\url{https://github.com/jwatowatson/RecurrentVivax/blob/master/Genetic_Model/iGraph_functions.R}.
}

\section{To-do}{

\enumerate{
\item Consider using RGs_to_eval_count as the too
many RGs cut-off instead of gs_count > 6 | time_point_count > 3
\item Add plot_Vivax_model example
\item Read up about using save and load to preserve graph attributes; also
read_graph and write_graph
}
}

\examples{
MOIs <- c(1,2)
RGs <- enumerate_RGs(MOIs)
RGs[[1]]
igraph::vertex_attr(RGs[[1]])

# Compute by hand the number of not necessarily transitive graphs
intra_edge_counts <- sapply(MOIs, choose, k = 2)
inter_edge_count <- choose(sum(MOIs), 2) - sum(intra_edge_counts)
prod(3^inter_edge_count, 2^intra_edge_counts)

}
